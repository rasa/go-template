#!/usr/bin/env bash
# insiped by https://github.com/jessfraz/dotfiles/blob/master/bin/generate-go-project-files
set -e
set -o pipefail

# Name of project to create in the form user/appname:
PROJECT="$(pwd)"
if [[ -n "$1" ]]; then
  PROJECT="$1"
fi

# Values to change it to:
OWNER="${OWNER:-Ross Smith II}"
EMAIL="${EMAIL:-ross@smithii.com}"

# Values found in the repository:
BASE_OWNER="${BASE_OWNER:-Ross Smith II}"
BASE_EMAIL="${BASE_EMAIL:-ross@smithii.com}"

# Location of repository:
BASE_HOST="${BASE_HOST:-https://github.com/}"
BASE_PROJECT="${BASE_PROJECT:-rasa/go-template}" ##SKIP_REWRITING##
BASE_URL="${BASE_URL:-${BASE_HOST}${BASE_PROJECT}}"

BASE_PROJECT_NAME="$(basename "${BASE_PROJECT}")"
BASE_PROJECT_DIR="$(dirname "${BASE_PROJECT}")"

PROJECT_NAME="$(basename "${PROJECT}")"
PROJECT_DIR="$(basename "$(dirname "${PROJECT}")")"
if [[ "${PROJECT_DIR}" = "." ]]; then
  PROJECT_DIR="${BASE_PROJECT_DIR}"
fi
PROJECT="${PROJECT_DIR}/${PROJECT_NAME}"

# see https://stackoverflow.com/a/8574392
containsElement () {
  local e match="$1"
  shift
  for e; do
    if [[ "${e}" == "${match}" ]]; then
      return 0
    fi
  done
  return 1
}

main() {
  local REPLY
  local files
  local lfiles
  local xfiles

  if [[ -n "$(find . -mindepth 1 | cut -c 1)" ]]; then
    printf "%s: Sorry, the current directory contains files\\n" "$0" >&2
    exit 1
  fi

  printf "Creating project %s from %s\\n" "${PROJECT}" "${BASE_URL}"

  git clone --depth 1 --branch master --quiet "${BASE_URL}" .

  # get list of executable files
  xfiles=()
  while IFS= read -r -d $'\0'; do
    xfiles+=("${REPLY}")
  done < <(git ls-files --stage -z | grep ^...7 | cut -f 2)

  # get list of symlinks
  lfiles=()
  while IFS= read -r -d $'\0'; do
    lfiles+=("${REPLY}")
  done < <(git ls-files --stage -z | grep ^12 | cut -f 2)

  rm -fr .git
  files=()
  while IFS= read -r -d $'\0'; do
    # skip rewriting symlinks as it's unneeded
    if containsElement "${REPLY}" "${lfiles[@]}"; then
      continue
    fi
    files+=("${REPLY}")
  done < <(find . \( -type f -o -type l \) -printf "%P\000")
  git init --quiet
  git commit --allow-empty --quiet --message "Initial (empty) commit"
  git add .
  # restore executable bits if they've been unset
  git update-index --chmod=+x "${xfiles[@]}"
  git commit --quiet --message "Initial commit (from ${BASE_PROJECT})"
  sed -i "\
    /##SKIP_REWRITING##/ !{
      s|\\b${BASE_OWNER}\\b|${OWNER}|g;
      s|\\b${BASE_EMAIL}\\b|${EMAIL}|g;
      s|\\b${BASE_PROJECT}\\b|${PROJECT}|g;
      s|\\b${BASE_PROJECT_NAME}\\b|${PROJECT_NAME}|g; 
    }
   " "${files[@]}"

  git commit --all --quiet --message "Change ${BASE_PROJECT} to ${PROJECT}"
  git log --oneline
}

main
